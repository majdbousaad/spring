package majd;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import majd.User;
import majd.UserRepository;

@Controller    // This means that this class is a Controller
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private ProjectRepository projectRepository;
	
	
	@GetMapping("/adduser") // Map ONLY GET Requests
	public  String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		if(name == "" || email == "") {
			String error = "You must provide a name and an email";
			
			return "redirect:?success=false&message=" + error;
		}
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		
		userRepository.save(n);
		return "redirect:/users?success=true";
	}
	@GetMapping(path="/addproject") // Map ONLY GET Requests
	public String addNewProject (@RequestParam String description) {
		
		Project p = new Project();
		p.setDescription(description);
		projectRepository.save(p);
		return "redirect:/projects?success=true";
	}
	
	
	@GetMapping(path="/users")
	public String getAllUsers(Model model) {
		
		Iterable<User> allusers = userRepository.findAll();
	
		for(User user : allusers)
		{
			user.allprojects = "";
			for(Project project : user.getProjects()) {
				user.allprojects += project.getDescription() + ", ";
			}
			
		}
		model.addAttribute("users", allusers);
		return "users";
		
	}
	
	@GetMapping(path="/assign") // Map ONLY GET Requests
	public String addNewProject (@RequestParam String projectDescription, @RequestParam String username) {
		
		User u;
		Project p;
		try {
			 u = userRepository.findByName(username).get(0);
			 p = projectRepository.findByDescription(projectDescription).get(0);
			
		} catch (Exception e) {
			String error = "Project " + projectDescription + " or " + 
							"User " + username + " do not exist, Please use projects and users already exist!";
			return "redirect:/?success=false&message=" + error;
		}
		
		u.getProjects().add(p);
		/*p.setUser(u);*/
		
		userRepository.save(u);
		/*projectRepository.save(p);*/
		return "redirect:/users?success=true";
		
		
	}
	@GetMapping(path="/projects")
	public String getAllProjects(Model model) {
		model.addAttribute("projects", projectRepository.findAll());
		
		return "projects";
	}
	@GetMapping(path="/users/{username}")
	public @ResponseBody User getUser(@PathVariable String username) {
		
		User u = userRepository.findByName(username).get(0);
		
		
		return u;
	}
	
}
